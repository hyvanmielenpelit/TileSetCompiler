using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.IO;
using System.Reflection.Metadata.Ecma335;
using System.Security.Cryptography;
using System.Text;
using TileSetCompiler.Creators;
using TileSetCompiler.Creators.Data;
using TileSetCompiler.Extensions;

namespace TileSetCompiler
{
    class CmapCompiler : ItemCompiler
    {
        const string _subDirName = "Cmap";
        const int _lineLength = 7;
        const string _noDescription = "no description";
        const string _missingCmapType = "Cmap";
        const string _boomerangString = "S_boom_";
        const string _boomerangCmapMissileType = "Cmap Missile";

        protected Dictionary<string, MissileData> _boomerangMissileData = new Dictionary<string, MissileData>()
        {
            { "tl", new MissileData("_top-left", MissileDirection.TopLeft) },
            { "tc", new MissileData("_top-center", MissileDirection.TopCenter) },
            { "tr", new MissileData("_top-right", MissileDirection.TopRight) },
            { "ml", new MissileData("_middle-left", MissileDirection.MiddleLeft) },
            { "mr", new MissileData("_middle-right", MissileDirection.MiddleRight) },
            { "bl", new MissileData("_bottom-left", MissileDirection.BottomLeft) },
            { "bc", new MissileData("_bottom-center", MissileDirection.BottomCenter) },
            { "br", new MissileData("_bottom-right", MissileDirection.BottomRight) }
        };

        protected MissingTileCreator MissingCmapTileCreator { get; set; }

        public CmapCompiler(StreamWriter tileNameWriter) : base(_subDirName, tileNameWriter)
        {
            MissingCmapTileCreator = new MissingTileCreator();
            MissingCmapTileCreator.BackgroundColor = Color.LightGray;
            MissingCmapTileCreator.TextColor = Color.DarkGreen;
            MissingCmapTileCreator.Capitalize = false;
        }

        public override void CompileOne(string[] splitLine)
        {
            if (splitLine.Length < _lineLength)
            {
                throw new Exception(string.Format("Cmap line '{0}' has too few elements.", string.Join(',', splitLine)));
            }

            var map = splitLine[1];
            var name = splitLine[2];
            var desc = splitLine[3];

            if (desc == _noDescription)
            {
                desc = "";
            }

            int widthInTiles = int.Parse(splitLine[4]);
            int heightInTiles = int.Parse(splitLine[5]);
            MainTileAlignment mainTileAlignment = GetMainTileAlignment(splitLine[6]);

            var subDir2 = map.ToFileName();
            var name2 = name.Substring(2);

            var dirPath = Path.Combine(BaseDirectory.FullName, subDir2);
            var fileName = map.ToFileName() + "_" + name2.ToFileName() + Program.ImageFileExtension;
            var relativePath = Path.Combine(_subDirName, subDir2, fileName);
            var cmapName = name.Substring(2).ToFileName();
            var filePath = Path.Combine(dirPath, fileName);
            FileInfo file = new FileInfo(filePath);

            if (file.Exists)
            {
                WriteCmapTileNameSuccess(relativePath, desc);
                using (var image = new Bitmap(Image.FromFile(file.FullName)))
                {
                    if (image.Size == Program.MaxTileSize)
                    {
                        DrawImageToTileSet(image);
                    }
                    else
                    {
                        DrawMainTileToTileSet(image, widthInTiles, heightInTiles, mainTileAlignment, file);
                    }
                    StoreTileFile(file, image.Size);
                }
            }
            else if (name.StartsWith(_boomerangString))
            {
                string suffix = name.Substring(name.Length - 2, 2);

                if (!_boomerangMissileData.ContainsKey(suffix))
                {
                    throw new Exception(string.Format("_boomerangMissileData does not contain suffix '{0}'.", suffix));
                }

                MissileDirection missileDirection = _boomerangMissileData[suffix].Direction;

                string sourceRelativePath = @"Objects\weapons\boomerang\weapon_boomerang.png";
                string sourceFullPath = Path.Combine(Program.InputDirectory.FullName, sourceRelativePath);
                FileInfo sourceFile = new FileInfo(sourceFullPath);

                bool isTileMissing = false;

                using (var missileBitmap = ItemMissileCreator.CreateMissileFromFile(sourceFile, name.ToProperCaseFirst(), missileDirection, out isTileMissing))
                {
                    if (!isTileMissing)
                    {
                        Console.WriteLine("Autogenerated Cmap Missile Tile {0} Successfully.", relativePath);
                        WriteTileNameAutogenerationSuccess(sourceRelativePath, relativePath, _boomerangCmapMissileType);
                        StoreTileFile(sourceFile, missileBitmap.Size);
                    }
                    else
                    {
                        Console.WriteLine("Autogenerated Missing Cmap Missile Tile {0}.", relativePath);
                        WriteTileNameAutogenerationError(sourceRelativePath, relativePath, _boomerangCmapMissileType);
                    }
                    DrawImageToTileSet(missileBitmap);
                }
            }
            else
            {
                Console.WriteLine("File '{0}' not found. Creating Missing Cmap tile.", file.FullName);
                WriteCmapTileNameErrorFileNotFound(relativePath, desc, "Creating Missing Cmap tile.");

                using (var image = MissingCmapTileCreator.CreateTile(_missingCmapType, null, name2))
                {
                    DrawImageToTileSet(image);
                }                
            }
            IncreaseCurXY();
        }
    }
}
