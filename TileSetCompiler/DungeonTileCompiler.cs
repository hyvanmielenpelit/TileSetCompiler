using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using TileSetCompiler.Creators;
using TileSetCompiler.Extensions;

namespace TileSetCompiler
{
    abstract class DungeonTileCompiler : BitmapCompiler
    {
        protected const float _darknessOpacity = 0.60f;
        protected const string _missingCmapType = "Cmap";

        public DarknessCreator DarknessCreator { get; private set; }

        protected DungeonTileCompiler(string subDirectoryName, StreamWriter tileNameWriter) : base(subDirectoryName, tileNameWriter)
        {
            DarknessCreator = new DarknessCreator(_missingCmapType);
        }

        protected void WriteCmapTileNameSuccess(string relativePath, string description)
        {
            WriteTileNameLine(relativePath, "OK", GetDescAndInfo(description, null, null));
            Program.FoundTileNumber++;
        }

        protected void WriteCmapTileNameErrorFileNotFound(string relativePath, string description, string infoText)
        {
            WriteTileNameLine(relativePath, "File not found", GetDescAndInfo(description, "Info:", infoText));
            Program.MissingTileNumber++;
        }


        protected void WriteCmapTileNameErrorDirectoryNotFound(string relativePath, string description, string infoText)
        {
            WriteTileNameLine(relativePath, "Directory not found", GetDescAndInfo(description, "Info:", infoText));
            Program.MissingTileNumber++;
        }

        protected void WriteCmapTileNameAutogenerationSuccess(string relativePathSource, string relativePathDest, string type, string description)
        {
            WriteTileNameLine(relativePathDest, "AUTOGENERATE SUCCESS: " + type, GetDescAndInfo(description, "Source:", relativePathSource));
            Program.AutoGeneratedTileNumber++;
        }

        protected void WriteCmapTileNameAutogenerationError(string relativePathSource, string relativePathDest, string type, string description)
        {
            WriteTileNameLine(relativePathDest, "AUTOGENERATE ERROR: " + type, GetDescAndInfo(description, "Source file not found:", relativePathSource));
            Program.AutoGeneratedMissingTileNumber++;
        }

        private string GetDescAndInfo(string description, string infoHeader, string infoText)
        {
            StringBuilder sb = new StringBuilder();
            if (!string.IsNullOrWhiteSpace(description))
            {
                sb.Append("Description: ").Append(description);
            }
            if (!string.IsNullOrWhiteSpace(infoText))
            {
                if (sb.Length > 0)
                {
                    sb.Append(", ");
                }
                if(!string.IsNullOrEmpty(infoHeader))
                {
                    sb.Append(infoHeader).Append(" ");
                }
                sb.Append(infoText);
            }
            return sb.ToString();
        }
    }
}
