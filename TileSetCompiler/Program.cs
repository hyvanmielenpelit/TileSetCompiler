using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Xml.Schema;

namespace TileSetCompiler
{
    public enum TransparencyMode { Color, Real };

    class Program
    {
        private static Size _tileSize = new Size(64, 96);
        private static List<int> _tileHeights = new List<int>( new int[] { 96, 72, 48, 36, 24, 18 } );
        private static string _tileNameSuffix = "_tilenames";
        private static string _tileNameExtension = ".txt";

        private static Dictionary<int, Size> _tileSizes = new Dictionary<int, Size>()
        {
            { 96, new Size (64, 96) },
            { 72, new Size (48, 72) },
            { 48, new Size (32, 48) },
            { 36, new Size (24, 36) },
            { 24, new Size (16, 24) },
            { 18, new Size (12, 18) }
        };

        public static DirectoryInfo WorkingDirectory { get; set; }
        public static Size TileSetSize { get; set; }
        public static Dictionary<int, Bitmap> TileSets { get; set; }
        public static string ImageFileExtension { get { return ".png"; } }
        public static Size MaxTileSize { get { return _tileSize; } }
        public static Dictionary<int, Size> TileSizes { get { return _tileSizes; } }
        public static DirectoryInfo OutputDirectory { get; set; }
        public static Dictionary<int, FileInfo> OutputFiles { get; set; }
        public static string OutputFileName { get; set; }
        public static string OutputFileExtension { get; set; }
        public static string TileNameOutputFileName { get; set; }
        public static TransparencyMode TransparencyMode { get; set; }
        public static int TileNumber { get; set; }
        public static int FoundTileNumber { get; set; }
        public static int UnknownTileNumber { get; set; }
        public static int AutoGeneratedTileNumber { get; set; }
        public static int AutoGeneratedUnknownTileNumber { get; set; }
        public static int CurX { get; set; }
        public static int CurY { get; set; }
        public static int MaxX { get; set; }
        public static int MaxY { get; set; }
        public static int CurrentCount { get; set; }
        protected static TileCompiler TileCompiler { get; set; }

        static void Main(string[] args)
        {
            //-----------------------------------------------------------
            // First argument is input directory
            //-----------------------------------------------------------

            if (args.Length == 0)
            {
                Console.WriteLine("Too few arguments. The first argument must be the input directory.");
                Console.ReadKey();
                return;
            }

            try
            {
                var dir = new DirectoryInfo(args[0]);
                if (!dir.Exists)
                {
                    Console.WriteLine("Input directory '{0}' does not exist.", args[0]);
                    Console.ReadKey();
                    return;
                }
                Console.WriteLine("Found Directory '{0}'.", args[0]);
                Program.WorkingDirectory = dir;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Input directory '{0}' is invalid.", args[0]);
                Console.WriteLine(ex.Message);
                Console.ReadKey();
                return;
            }

            Directory.SetCurrentDirectory(Program.WorkingDirectory.FullName);


            //-----------------------------------------------------------
            // Second argument is output directory
            //-----------------------------------------------------------

            if (args.Length < 2)
            {
                Console.WriteLine("Too few arguments. The second argument must be the output directory.");
                Console.ReadKey();
                return;
            }

            OutputDirectory = new DirectoryInfo(args[1]);

            if (!OutputDirectory.Exists)
            {
                try
                {
                    OutputDirectory.Create();
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error creating directory '{0}':", OutputDirectory.FullName);
                    Console.WriteLine(ex.Message);
                    Console.ReadKey();
                    return;
                }
            }

            //-----------------------------------------------------------
            // Third argument is the output file name without extension
            //-----------------------------------------------------------

            if (args.Length < 3)
            {
                Console.WriteLine("Too few arguments. The third argument must be the output file name (without extension).");
                Console.ReadKey();
                return;
            }

            OutputFileName = args[2];

            //This is the name of the file, where the program writes the names of all tiles in the tileset
            TileNameOutputFileName = OutputFileName + _tileNameSuffix + _tileNameExtension;


            //-----------------------------------------------------------
            // Fourth argument is the output file extension: bmp or png
            //-----------------------------------------------------------

            if (args.Length < 4)
            {
                Console.WriteLine("Too few arguments. The fourth argument must be the output file type: bmp or png.");
                Console.ReadKey();
                return;
            }

            OutputFileExtension = "." + args[3].TrimStart('.').ToLower();


            //-----------------------------------------------------------
            // Fifth argument is the transparency mode: color or real
            //-----------------------------------------------------------

            if (args.Length < 5)
            {
                Console.WriteLine("Too few arguments. The fifth argument must be the transparency mode: color or real.");
                Console.ReadKey();
                return;
            }

            var transparencyModeString = args[4];
            if(transparencyModeString.ToLower() == "color")
            {
                TransparencyMode = TransparencyMode.Color;
            }
            else if(transparencyModeString.ToLower() == "real")
            {
                TransparencyMode = TransparencyMode.Real;
            }
            else
            {
                Console.WriteLine("Unknown Transparency Mode '{0}'.", transparencyModeString);
                Console.ReadKey();
                return;
            }


            InitializeOutputFiles();

            using (TileCompiler = new TileCompiler())
            {
                try
                {
                    InitializeTileSets();

                    TileCompiler.Compile();
                    TileCompiler.Close();

                    SaveFiles();

                    Console.WriteLine("Total Tiles: {0}", TileNumber);
                    Console.WriteLine("Found Tiles: {0}", FoundTileNumber);
                    Console.WriteLine("Missing Tiles: {0}", UnknownTileNumber);
                    Console.WriteLine("Auto-Generated Tiles: {0}", AutoGeneratedTileNumber);
                    Console.WriteLine("Missing Auto-Generated Tiles: {0}", AutoGeneratedUnknownTileNumber);
                    Console.WriteLine("Output Bitmap Size: {0}x{1} tiles, {2}x{3} pixels.", TileSetSize.Width, TileSetSize.Height,
                        TileSetSize.Width * _tileSize.Width, TileSetSize.Height * _tileSize.Height);
                    Console.WriteLine("Finished.");
                }
                catch(Exception ex)
                {
                    //Error occurred
                    Console.WriteLine(string.Format("Exception occurred: {0}", ex.Message));
                    if(ex.InnerException != null)
                    {
                        Console.WriteLine(string.Format("Inner Exception: {0}", ex.InnerException.Message));
                    }
                    Console.WriteLine("Exiting.");
                }
                finally
                {
                    Console.ReadKey();
                }
            }
        }

        private static void SaveFiles()
        {
            foreach (var kvp in TileSets)
            {
                var tileHeight = kvp.Key;
                var tileSet = kvp.Value;
                var outputFile = OutputFiles[tileHeight];

                try
                {
                    if (outputFile.Exists)
                    {
                        outputFile.Delete();
                    }

                    tileSet.Save(outputFile.FullName);
                }
                catch (Exception ex)
                {
                    throw new Exception("Saving output file '" + outputFile.FullName + "' failed.", ex);
                }   
            }            
        }

        protected static void InitializeTileSets()
        {
            TileNumber += TileCompiler.GetTileNumber();

            int widthInTiles = (int)Math.Ceiling(Math.Sqrt(TileNumber * 1.5d));
            // Make divisible by 3
            if (widthInTiles % 3 > 0)
            {
                widthInTiles += 3 - widthInTiles % 3;
            }
            int heightInTiles = widthInTiles / 3 * 2;

            CurX = 0;
            MaxX = widthInTiles - 1;
            CurY = 0;
            MaxY = heightInTiles - 1;
            TileSetSize = new Size(widthInTiles, heightInTiles);

            TileSets = new Dictionary<int, Bitmap>();
            foreach (int tileheight in _tileHeights)
            {
                int bitMapWidth = Program.TileSizes[tileheight].Width * widthInTiles;
                int bitMapHeight = Program.TileSizes[tileheight].Height * heightInTiles;

                TileSets.Add(tileheight, new Bitmap(bitMapWidth, bitMapHeight));
            }
        }

        protected static void InitializeOutputFiles()
        {
            OutputFiles = new Dictionary<int, FileInfo>();

            foreach (int height in _tileHeights)
            {
                int width = height / 3 * 2;
                string filename = string.Format("{0}{1}x{2}{3}", OutputFileName, width, height, OutputFileExtension);
                OutputFiles.Add(height, new FileInfo(Path.Combine(OutputDirectory.FullName, filename)));
            }
        }
    }
}
